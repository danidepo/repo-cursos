# de los que si conocemos
inputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.inpute.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rand.inpute(dataframe[, col])
}
dataframe
}
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
random.inpute.data.frame(data, c(1,2))
#x es un vector de datos que puede contener NA
rand.inpute <- function(x) {
# missing contiene un vector de valores T/F dependiendo del NA de x
missing <- is.na(x)
# n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
# x.obs son los valores que tienen dato diferente de NA en x
x.obs <- x[!missing]
# por defecto, devolvere lo mismo que habia entrado por parametro
imputed <- x
# en los valores que faltaban, los reemplazamos por una muestra
# de los que si conocemos
inputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.inpute.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rand.inpute(dataframe[, col])
}
dataframe
}
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
random.inpute.data.frame(data, c(1,2))
#x es un vector de datos que puede contener NA
rand.inpute <- function(x) {
# missing contiene un vector de valores T/F dependiendo del NA de x
missing <- is.na(x)
# n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
# x.obs son los valores que tienen dato diferente de NA en x
x.obs <- x[!missing]
# por defecto, devolvere lo mismo que habia entrado por parametro
imputed <- x
# en los valores que faltaban, los reemplazamos por una muestra
# de los que si conocemos
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.inpute.data.frame(data, c(1,2))
data <- random.inpute.data.frame(data, c(1,2))
View(data)
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
data$Income[data$Income==0] <- NA
data <- random.inpute.data.frame(data, c(1,2))
View(data)
family.salary = c(40000, 60000, 50000, 80000, 60000, 70000, 60000)
family.size = c(4, 3, 2, 2, 3, 4, 3)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
View(family)
unique(family)
family.unique <- unique(family)
family.salary = c(40000, 60000, 50000, 80000, 60000, 70000, 60000)
family.size = c(4, 3, 2, 2, 3, 4, 3)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
family.unique <- unique(family)
View(family.unique)
duplicated(family)
family[duplicated(family),]
install.packages("scales")
library(scales)
students <- read.csv("../data/tema1/data-conversion.csv")
View(students)
students$Income.rescaled <- rescale(students$Income)
View(students)
students$Income - min(students$Income))/(max(students$Income) - min(students$Income))
(students$Income - min(students$Income))/(max(students$Income) - min(students$Income))
rescale(students$Income, to = c(0,100))
rescale.many <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name] <- rescale(dataframe[, col])
}
cat(paste("Hemos rescalado ", length(cols), " variables"))
dataframe
}
students <- rescale.many(students, c(1,4))
View(students)
housing <- read.csv("../data/tema1/BostonHousing.csv")
View(housing)
View(housing)
housing.z <- scale(housing)
View(housing.z)
housing.z <- scale(housing, center = TRUE, scale = TRUE)
housing.none <- scale(housing, center = FALSE, scale = FALSE)
View(housing.none)
View(housing)
housing.mean <- scale(housing, center = TRUE, scale = FALSE)
View(housing.mean)
View(housing.mean)
housing.sd <- scale(housing, center = FALSE, scale = TRUE)
View(housing.sd)
scale.many = function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], "z", sep = ".")
dataframe[name] <- scale(dataframe[,col])
}
cat(paste("Hemos normalizado ", length(cols), " variable(s)"))
dataframe
}
scale.many(housing, c(1,3,5:8))
housing <- scale.many(housing, c(1,3,5:8))
View(housing)
students <- read.csv("../data/tema1/data-conversion.csv")
students <- read.csv("../data/tema1/data-conversion.csv")
View(students)
bp <- c(-Inf, 10000, 31000, Inf)
names <- c("Low", "Average", "High")
students$Income.cat <- cut(students$Income, breaks = bp, labels = names)
View(students)
View(students)
students$Income.cat2 <- cut(students$Income, breaks = bp)
View(students)
students$Income.cat3 <- cut(students$Income, breaks = 4, labels = c("Level 1", "Level 2",
"Level 3", "Level 4")
)
View(students)
#dummy variables
students <- read.csv("../data/tema1/data-conversion.csv")
install.packages("dummies")
library(dummies)
View(students)
students.dummy <- dummy.data.frame(students, sep = ".")
View(students.dummy)
names(students.dummy)
View(students.dummy)
dummy(students$State, ".")
dummy(students$State, sep = ".")
dummy.data.frame(students, names = c("State", "Gender"), sep = ".")
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv", header = TRUE, stringsAsFactors = FALSE)
View(housing.data)
summary(housing.data)
housing.data.1 <- na.omit(housing.data)
summary(housing.data.1)
##Eliminar las NAs de ciertas columnas
drop_na <- c("rad")
##Eliminar las NAs de ciertas columnas
drop_na <- c("rad")
housing.data.2 <- housing.data[
complete.cases(housing.data[,!(names(housing.data))%in% drop_na]),]
summary(housing.data.2)
names(housing.data)
!(names(housing.data))%in% drop_na
##Eliminar toda una columna
housing.data$rad <- NULL
Summary(housing.data)
summary(housing.data)
drops <- c("rad", "ptratio")
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv", header = TRUE, stringsAsFactors = FALSE)
housing.data.3 <- housing.data[,!(names(housing.data) %in% drops)]
summary(housing.data)
summary(housing.data.3)
install.packages("Hmisc")
library(Hmisc)
housing.data.copy1 <- housing.data
View(housing.data.copy1)
housing.data.copy1$ptratio <- impute(housing.data.copy1$ptratio, mean)
housing.data.copy1$rad <- impute(housing.data.copy1$rad, mean)
summary(housing.data.copy1)
housing.data.copy2$ptratio <- impute(housing.data.copy2$ptratio, median)
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
housing.data.copy2 <- housing.data
housing.data.copy2$ptratio <- impute(housing.data.copy2$ptratio, median)
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
summary(housing.data.copy2)
housing.data.copy3 <- housing.data
housing.data.copy3$ptratio <- impute(housing.data.copy3$ptratio, 18)
housing.data.copy3$rad <- impute(housing.data.copy3$rad, 7)
summary(housing.data.3)
install.packages("mice")
library(mice)
md.pattern(housing.data)
md.pattern(housing.data)
library(mice)
md.pattern(housing.data)
install.packages("mice")
install.packages("mice")
library(mice)
install.packages("mice")
md.pattern(housing.data)
library(mice)
md.pattern(housing.data)
install.packages("VIM")
library(VIM)
aggr(housing.data)
aggr(housing.data,
col=c('green', 'red'))
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data))
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.5)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 4)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 3)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("histograma de NAs", "Patrón")
)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Patrón")
)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Prueba")
)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Prueba")
)
install.packages("VIM")
library(VIM)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Prueba")
)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Patrón")
)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Patrón")
)
library(VIM)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Patrón")
)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Patrón")
)
install.packages("tidyr")
library(tidyr)
crime.data <- read.csv("../data/tema1/USArrests.csv", stringsAsFactors = FALSE)
View(crime.data)
View(crime.data)
crime.data <- cbind(state = rownames(crime.data), crime.data)
View(crime.data)
crime.data.1 <- gather(crime.data,key = "crime_type", value = "arrest_estimate")
crime.data.1 <- gather(crime.data,key = "crime_type", value = "arrest_estimate",
Murder : UrbanPop)
View(crime.data.1)
crime.data.2 <- gather(crime.data,
key = "crime_type",
value = "arrest_estimate",
-state)
View(crime.data.2)
crime.data.3 <- gather(crime.data,
key = "crime_type",
value = "arrest_estimate",
Murder, Assault)
View(crime.data.3)
crime.data.4 <- spread(crime.data.2,
key = "crime_type",
value = "arrest_estimate")
View(crime.data.4)
crime.data.5 <- unite(crime.data,
col = "Murder_Assault",
Murder, Assault,
sep = "_")
View(crime.data.5)
crime.data.6 <- separate(crime.data.5,
col = "Murder_Assault",
into = c("Murder","Assault"),
sep = "_")
View(crime.data.6)
library(mice)
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(housing.data)
columns <- c("ptratio","rad")
imputed_data <- mice(housing.data[,names(housing.data)%in% columns],
m = 5,
maxit = 50,
method = "pmm",
seed = 2018)
View(imputed_data)
View(imputed_data)
summary(imputed_data)
complete.data <- complete(imputed_data)
complete.data <- mice::complete(imputed_data)
View(complete.data)
housing.data$ptratio <- complete.data$ptratio
housing.data$rad <- complete.data$rad
View(housing.data)
anyNA(housing.data)
impute_arg <- aregImpute(ptratio + rad, data = housing.data, n.impute = 5)
library(Hmisc)
impute_arg <- aregImpute(ptratio + rad, data = housing.data, n.impute = 5)
impute_arg <- aregImpute(ptratio + rad, data = housing.data, n.impute = 5)
impute_arg <- aregImpute(~ptratio + rad, data = housing.data, n.impute = 5)
impute_arg
impute_arg <- aregImpute(~ptratio + rad, data = housing.data, n.impute = 5)
impute_arg
impute_arg$imputed$rad
impute_arg$imputed$rad
impute_arg$imputed$ptratio
impute_arg <- aregImpute(~ptratio + rad, data = housing.data, n.impute = 5)
impute_arg$imputed$ptratio
ozone.data <- read.csv("../data/tema1/ozone.csv", stringsAsFactors = FALSE)
ozone.data <- read.csv("../data/tema1/ozone.csv", stringsAsFactors = FALSE)
View(ozone.data)
outlier_values <- boxplot(ozone.data$pressure_height)$out
boxplot(ozone.data$pressure_height,
main = "Pressure Height",
boxwex = 0.1)
boxplot(ozone.data$pressure_height,
main = "Pressure Height",
boxwex = 0.5)
summary(ozone.data$pressure_height)
boxplot(pressure_height ~ Month, data = ozone.data,
main = "Presure Height per Month")
boxplot(ozone_reading ~Month,
data = ozone.data,
main = "Ozone reading per Month")
boxplot(ozone_reading ~Month,
data = ozone.data,
main = "Ozone reading per Month")$out
boxplot(ozone.data$pressure_height,
main = "Pressure Height",
boxwex = 0.5)$out
summary(ozone.data$pressure_height)
mtext("Hola")
boxplot(ozone_reading ~Month,
data = ozone.data,
main = "Ozone reading per Month")
View(ozone.data)
x[x>quantile[2]] <- median(x, na.rm = removeNA)
x[x<quantile[1]] <- mean(x, na.rm = removeNA)
impute_outliers <- function(x, removeNA = TRUE) {
quantiles <- quantile(x, c(0.05, 0.95), na.rm = removeNA)
x[x<quantile[1]] <- mean(x, na.rm = removeNA)
x[x>quantile[2]] <- median(x, na.rm = removeNA)
}
x[x>quantiles[2]] <- median(x, na.rm = removeNA)
impute_outliers <- function(x, removeNA = TRUE) {
quantiles <- quantile(x, c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x>quantiles[2]] <- median(x, na.rm = removeNA)
}
imputed_data <- impute_outliers(ozone.data$pressure_height)
par(mfrow = c(1,2))
boxplot(ozone.data$pressure_height, main = "Presión con outliers")
impute_outliers <- function(x, removeNA = TRUE) {
quantiles <- quantile(x, c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x>quantiles[2]] <- median(x, na.rm = removeNA)
x
}
imputed_data <- impute_outliers(ozone.data$pressure_height)
boxplot(ozone.data$pressure_height, main = "Presión con outliers")
par(mfrow = c(1,2))
boxplot(ozone.data$pressure_height, main = "Presión con outliers")
boxplot(imputed_data, main = "Presión sin outliers")
replace_outliers <- function(x, removeNA = TRUE) {
qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile(x, probs = x(.05, .95), na.rm = removeNA)
iqr <- qrts[2]-qrts[1]
h <- 1.5 * iqr
x[x < qrts[1]-h] <- caps[1]
x[x > qrts[2]+h] <- caps[2]
x
}
par(mfrow = c(1,2))
replace_outliers <- function(x, removeNA = TRUE) {
qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile(x, probs = c(.05, .95), na.rm = removeNA)
iqr <- qrts[2]-qrts[1]
h <- 1.5 * iqr
x[x < qrts[1]-h] <- caps[1]
x[x > qrts[2]+h] <- caps[2]
x
}
capped_pressure_height <- replace_outliers(ozone.data$pressure_height)
par(mfrow = c(1,2))
boxplot(ozone.data$pressure_height, main = "Presión con outliers")
boxplot(capped_pressure_height, main = "Presion sin outliers")
data <- read.csv("../data/tema2/auto-mpg.csv",
header = TRUE,
stringsAsFactors = FALSE)
data <- read.csv("../data/tema2/auto-mpg.csv",
header = TRUE,
stringsAsFactors = FALSE)
View(data)
View(data)
View(data)
data$cylinders <- factor(data$cylinders,
level = c(3,4,5,6,8),
labels = c("3cil", "4cil", "5cil", "6cil", "8cil"))
View(data)
summary(data)
str(data)
View(data)
summary(data$cylinders)
summary(data$mpg)
str(data$cylinders)
View(data)
