getwd()
auto <- read.csv("..")
auto <- read.csv("../data/tema1/auto-mpg.csv", header = TRUE, sep = ",")
auto <- read.csv("../data/tema1/auto-mpg.csv", header = TRUE, sep = ",")
View(auto)
names(auto)
#read.csv2 == read.csv("filename", sep = ";", dec = ",")
# sep = "t"
auto_no_header <- read.csv("../data/tema1/auto-mpg-noheader.csv", header = FALSE)
View(auto_no_header)
head(auto_no_header, 4)
head(auto_no_sense)
auto_no_sense <- read.csv("../data/tema1/auto-mpg-noheader.csv")
head(auto_no_sense)
auto_custom_header <- read.csv("../data/tema1/auto-mpg-noheader.csv",
header = F,
col.names = c("numero", "millas_por_galeon","cilindrada",
"desplazamiento","caballos_de_potencia",
"peso", "aceleracion", "a単o", "modelo"
)
)
head(auto_custom_header, 2)
who_from_internet <- read.csv("https://frogrames.es/course-contents/r/intro/tema1/WHO.csv")
who_from_internet <- read.csv("https://frogames.es/course-contents/r/intro/tema1/WHO.csv")
View(who_from_internet)
install.packages("XML")
library("XML", lib.loc="~/R/win-library/3.5")
detach("package:XML", unload=TRUE)
library(XML)
url <- "../data/tema1/cd_catalog.xml"
xmldoc <- xmlparse(url)
xmldoc <- xmlParse(url)
rootnode <- xmlRoot(xmldoc)
rootnode[1]
rootnode[2]
cds_data <- xmlSApply(rootnode, function(x) xmlSApply(x, xmlValue))
View(cds_data)
cds.catalog <- data.frame(t(cds_data), row.names = NULL)
View(cds.catalog)
head(cds.catalog, 2)
cds.catalog[1:5,]
population_url <- "../data/tema1/WorldPopulation-wiki.htm"
tables <- readHTMLTable(population_url)
View(tables)
tables[[6]]
most_populated <- tables[[6]]
head(most_populated, 3)
custom_table <- readHTMLTable(population_url, which = 6)
View(custom_table)
install.packages("jsonlite")
library(jsonlite)
dat.1 <- fromJSON("../data/tema1/students.json")
View(dat.1)
dat.2 <- fromJSON("../data/tema1/student-courses.json")
View(dat.2)
View(dat.1)
View(dat.1)
View(dat.2)
View(dat.1)
currencies <- fromJSON(url)
install.packages("curl")
url <- "https://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json"
currencies <- fromJSON(url)
currencies <- fromJSON(url)
currencies <- fromJSON(url)
currencies_json <- fromJSON(url)
library(curl)
url <- "https://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json"
currencies_json <- fromJSON(url)
url <- "http://www.floatrates.com/daily/usd.json"
currencies_json <- fromJSON(url)
View(currencies_json)
View(currencies_json)
currencies_json$eur$code
currencie.data <- currencies_json$eur$code
currencie.data <- currencies_json$eur
View(currencie.data)
head(dat.1,3)
dat.1$Email
currencie.data[1:5,]
currencie.data[1:4,]
View(currencie.data)
View(currencies_json)
currencie.data[1:2,]
View(currencie.data)
dat.1[c(2,5,8)]
dat.1[c(2,5,8),]
dat.1[,c(2,5)]
head(dat.2,3)
students_data <- read.fw("../data/tema1/student-fwf.txt", widths=c(4,15,20,15,4),
col.names = c("id", "nombre", "email", "carrera", "a単o"))
students_data <- read.fwf("../data/tema1/student-fwf.txt", widths=c(4,15,20,15,4),
col.names = c("id", "nombre", "email", "carrera", "a単o"))
View(students_data)
students_data_header <- read.fwf("../data/tema1/student-fwf-header.txt",
widths = c(4,15,20,15,4),
header = TRUE, sep = "t"
skip = 2)
students_data_header <- read.fwf("../data/tema1/student-fwf-header.txt",
widths = c(4,15,20,15,4),
header = TRUE, sep = "\t",
skip = 2)
View(students_data_header)
students_data <- read.fwf("../data/tema1/student-fwf.txt", widths=c(4, 15, -20, 15, 4),
col.names = c("id", "nombre", "carrera", "a単o")
)
View(students_data)
View(auto)
clientes <- c("Juan Gabriel", "Ricardo", "Pedro")
fechas <- c("2017-12-27", "2017-11-1", "2018-1-1")
fechas <- as.Date(c("2017-12-27", "2017-11-1", "2018-1-1"))
pago <- c(315, 192.55, 40.15)
pedidos <- data.frame(clientes, fechas, pago)
View(pedidos)
save(pedidos, file = "../data/tema1/pedidos.Rdata")
saveRDS(pedidos, file="../data/tema1/pedidos.rds")
clientes_vip <- c("Juan Gabriel", "Ricardo")
save(pedidos, clientes_vip, file = "../data/tema1/pedidos.Rdata")
remove(pedidos)
load("../data/tema1/pedidos.Rdata")
View(pedidos)
orders <- loadRDS("../data/tema1/pedidos.rds")
orders <- readRDS("../data/tema1/pedidos.rds")
View(orders)
data(iris)
data(cars)
save.image(file = "../data/tema1/alldata.Rdata")
primes <- c(2,3,5,7,11,13)
pow2 <- c(2,4,8,16,32,64,128)
save( list = c("primes", "pow2"), file = "../data/tema1/primes_and_pow2.Rdata")
View(cars)
View(iris)
attach("../data/tema1/primes_and_pow2.Rdata")
data()
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
View(data)
data.cleaned <- na.omit(data)
View(data.cleaned)
is.na(data[4,2])
is.na(data[4,1])
is.na(data$Income)
data.income.cleaned <- data[!is.na(data$Income),]
View(data.income.cleaned)
complete.cases(data)
data.cleaned.2 <- data[complete.cases(data),]
View(data.cleaned.2)
#Convertir los ceros de ingresos en NA
data$Income[data$Income == 0]
#Convertir los ceros de ingresos en NA
data$Income[data$Income == 0] <- NA
#Medidas de centralizacion y dispersion
mean(data$Income)
mean(data$Income, na.rm = TRUE)
sd(data$Income)
sd(data$Income, na.rm = TRUE)
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
View(data)
data$Income.mean <- ifelse(is.na(data$Income), mean(data$Income, na.rm = TRUE),
data$Income)
View(data)
View(data)
#x es un vector de datos que puede contener NA
rand.inpute <- function(x) {
# missing contiene un vector de valores T/F dependiendo del NA de x
missing <- is.na(x)
# n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
# x.obs son los valores que tienen dato diferente de NA en x
x.obs <- x[!missing]
# por defecto, devolvere lo mismo que habia entrado por parametro
imputed <- x
# en los valores que faltaban, los reemplazamos por una muestra
# de los que si conocemos
inputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.inpute.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rand.inpute(dataframe[, col])
}
}
random.inpute.data.frame(data, c(1,2))
return (impute)
# en los valores que faltaban, los reemplazamos por una muestra
# de los que si conocemos
inputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
#x es un vector de datos que puede contener NA
rand.inpute <- function(x) {
# missing contiene un vector de valores T/F dependiendo del NA de x
missing <- is.na(x)
# n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
# x.obs son los valores que tienen dato diferente de NA en x
x.obs <- x[!missing]
# por defecto, devolvere lo mismo que habia entrado por parametro
impute <- x
# en los valores que faltaban, los reemplazamos por una muestra
# de los que si conocemos
inputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
random.inpute.data.frame(data, c(1,2))
random.inpute.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rand.inpute(dataframe[, col])
}
dataframe
}
random.inpute.data.frame(data, c(1,2))
#x es un vector de datos que puede contener NA
rand.inpute <- function(x) {
# missing contiene un vector de valores T/F dependiendo del NA de x
missing <- is.na(x)
# n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
# x.obs son los valores que tienen dato diferente de NA en x
x.obs <- x[!missing]
# por defecto, devolvere lo mismo que habia entrado por parametro
imputed <- x
# en los valores que faltaban, los reemplazamos por una muestra
# de los que si conocemos
inputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.inpute.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rand.inpute(dataframe[, col])
}
dataframe
}
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
random.inpute.data.frame(data, c(1,2))
#x es un vector de datos que puede contener NA
rand.inpute <- function(x) {
# missing contiene un vector de valores T/F dependiendo del NA de x
missing <- is.na(x)
# n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
# x.obs son los valores que tienen dato diferente de NA en x
x.obs <- x[!missing]
# por defecto, devolvere lo mismo que habia entrado por parametro
imputed <- x
# en los valores que faltaban, los reemplazamos por una muestra
# de los que si conocemos
inputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.inpute.data.frame <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], ".imputed", sep = "")
dataframe[name] = rand.inpute(dataframe[, col])
}
dataframe
}
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
random.inpute.data.frame(data, c(1,2))
#x es un vector de datos que puede contener NA
rand.inpute <- function(x) {
# missing contiene un vector de valores T/F dependiendo del NA de x
missing <- is.na(x)
# n.missing contiene cuantos valores son NA dentro de x
n.missing <- sum(missing)
# x.obs son los valores que tienen dato diferente de NA en x
x.obs <- x[!missing]
# por defecto, devolvere lo mismo que habia entrado por parametro
imputed <- x
# en los valores que faltaban, los reemplazamos por una muestra
# de los que si conocemos
imputed[missing] <- sample(x.obs, n.missing, replace = TRUE)
return (imputed)
}
random.inpute.data.frame(data, c(1,2))
data <- random.inpute.data.frame(data, c(1,2))
View(data)
data <- read.csv("../data/tema1/missing-data.csv", na.strings = "")
data$Income[data$Income==0] <- NA
data <- random.inpute.data.frame(data, c(1,2))
View(data)
family.salary = c(40000, 60000, 50000, 80000, 60000, 70000, 60000)
family.size = c(4, 3, 2, 2, 3, 4, 3)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
View(family)
unique(family)
family.unique <- unique(family)
family.salary = c(40000, 60000, 50000, 80000, 60000, 70000, 60000)
family.size = c(4, 3, 2, 2, 3, 4, 3)
family.car = c("Lujo", "Compacto", "Utilitario", "Lujo", "Compacto", "Compacto", "Compacto")
family <- data.frame(family.salary, family.size, family.car)
family.unique <- unique(family)
View(family.unique)
duplicated(family)
family[duplicated(family),]
install.packages("scales")
library(scales)
students <- read.csv("../data/tema1/data-conversion.csv")
View(students)
students$Income.rescaled <- rescale(students$Income)
View(students)
students$Income - min(students$Income))/(max(students$Income) - min(students$Income))
(students$Income - min(students$Income))/(max(students$Income) - min(students$Income))
rescale(students$Income, to = c(0,100))
rescale.many <- function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name] <- rescale(dataframe[, col])
}
cat(paste("Hemos rescalado ", length(cols), " variables"))
dataframe
}
students <- rescale.many(students, c(1,4))
View(students)
housing <- read.csv("../data/tema1/BostonHousing.csv")
View(housing)
View(housing)
housing.z <- scale(housing)
View(housing.z)
housing.z <- scale(housing, center = TRUE, scale = TRUE)
housing.none <- scale(housing, center = FALSE, scale = FALSE)
View(housing.none)
View(housing)
housing.mean <- scale(housing, center = TRUE, scale = FALSE)
View(housing.mean)
View(housing.mean)
housing.sd <- scale(housing, center = FALSE, scale = TRUE)
View(housing.sd)
scale.many = function(dataframe, cols) {
names <- names(dataframe)
for (col in cols) {
name <- paste(names[col], "z", sep = ".")
dataframe[name] <- scale(dataframe[,col])
}
cat(paste("Hemos normalizado ", length(cols), " variable(s)"))
dataframe
}
scale.many(housing, c(1,3,5:8))
housing <- scale.many(housing, c(1,3,5:8))
View(housing)
students <- read.csv("../data/tema1/data-conversion.csv")
students <- read.csv("../data/tema1/data-conversion.csv")
View(students)
bp <- c(-Inf, 10000, 31000, Inf)
names <- c("Low", "Average", "High")
students$Income.cat <- cut(students$Income, breaks = bp, labels = names)
View(students)
View(students)
students$Income.cat2 <- cut(students$Income, breaks = bp)
View(students)
students$Income.cat3 <- cut(students$Income, breaks = 4, labels = c("Level 1", "Level 2",
"Level 3", "Level 4")
)
View(students)
#dummy variables
students <- read.csv("../data/tema1/data-conversion.csv")
install.packages("dummies")
library(dummies)
View(students)
students.dummy <- dummy.data.frame(students, sep = ".")
View(students.dummy)
names(students.dummy)
View(students.dummy)
dummy(students$State, ".")
dummy(students$State, sep = ".")
dummy.data.frame(students, names = c("State", "Gender"), sep = ".")
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv", header = TRUE, stringsAsFactors = FALSE)
View(housing.data)
summary(housing.data)
housing.data.1 <- na.omit(housing.data)
summary(housing.data.1)
##Eliminar las NAs de ciertas columnas
drop_na <- c("rad")
##Eliminar las NAs de ciertas columnas
drop_na <- c("rad")
housing.data.2 <- housing.data[
complete.cases(housing.data[,!(names(housing.data))%in% drop_na]),]
summary(housing.data.2)
names(housing.data)
!(names(housing.data))%in% drop_na
##Eliminar toda una columna
housing.data$rad <- NULL
Summary(housing.data)
summary(housing.data)
drops <- c("rad", "ptratio")
housing.data <- read.csv("../data/tema1/housing-with-missing-value.csv", header = TRUE, stringsAsFactors = FALSE)
housing.data.3 <- housing.data[,!(names(housing.data) %in% drops)]
summary(housing.data)
summary(housing.data.3)
install.packages("Hmisc")
library(Hmisc)
housing.data.copy1 <- housing.data
View(housing.data.copy1)
housing.data.copy1$ptratio <- impute(housing.data.copy1$ptratio, mean)
housing.data.copy1$rad <- impute(housing.data.copy1$rad, mean)
summary(housing.data.copy1)
housing.data.copy2$ptratio <- impute(housing.data.copy2$ptratio, median)
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
housing.data.copy2 <- housing.data
housing.data.copy2$ptratio <- impute(housing.data.copy2$ptratio, median)
housing.data.copy2$rad <- impute(housing.data.copy2$rad, median)
summary(housing.data.copy2)
housing.data.copy3 <- housing.data
housing.data.copy3$ptratio <- impute(housing.data.copy3$ptratio, 18)
housing.data.copy3$rad <- impute(housing.data.copy3$rad, 7)
summary(housing.data.3)
install.packages("mice")
library(mice)
md.pattern(housing.data)
md.pattern(housing.data)
library(mice)
md.pattern(housing.data)
install.packages("mice")
install.packages("mice")
library(mice)
install.packages("mice")
md.pattern(housing.data)
library(mice)
md.pattern(housing.data)
install.packages("VIM")
library(VIM)
aggr(housing.data)
aggr(housing.data,
col=c('green', 'red'))
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data))
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.5)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 4)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 3)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("histograma de NAs", "Patr坦n")
)
aggr(housing.data,
col=c('green', 'red'),
numbers = TRUE,
sortVars = TRUE,
labels = names(housing.data),
cex.axis = 0.7,
gap = 1,
ylab = c("Histograma de NAs", "Patr坦n")
)
