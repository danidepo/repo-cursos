abline(v = median(winter), col = "blue")
hist(spring, prob = TRUE, xlab = "Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v= mean(spring))
abline(v= mean(spring), col = "red")
abline(v= median(spring), col = "blue")
hist(spring, prob = TRUE, xlab = "Alquiler diario en verano", main = "")
lines(density(spring))
abline(v= mean(spring), col = "red")
abline(v= median(spring), col = "blue")
hist(spring, prob = TRUE, xlab = "Alquiler diario en verano", main = "")
lines(density(summer))
par(mfrow=c(2,2))
hist(winter, prob = TRUE, xlab = "Alquiler diario en invierno", main = "")
lines(density(winter))
abline(v = mean(winter), col = "red")
abline(v = median(winter), col = "blue")
hist(spring, prob = TRUE, xlab = "Alquiler diario en primavera", main = "")
lines(density(spring))
abline(v= mean(spring), col = "red")
abline(v= median(spring), col = "blue")
hist(spring, prob = TRUE, xlab = "Alquiler diario en verano", main = "")
lines(density(summer))
abline(v= mean(summer), col = "red")
abline(v= median(summer), col = "blue")
hist(spring, prob = TRUE, xlab = "Alquiler diario en otoño", main = "")
lines(density(fall))
abline(v= mean(fall), col = "red")
abline(v= median(fall), col = "blue")
install.packages("beanplot")
library(beanplot)
beanplot(data$cnt ~ data$season, col = c("blue", "red", "yellow"))
par(mfrow = c(1,1))
beanplot(data$cnt ~ data$season, col = c("blue", "red", "yellow"))
View(data)
data$dteday <- as.Date(data$dteday, format = "%Y-%m-%d")
View(data)
data <- read.csv("../data/tema2/daily-bike-rentals.csv")
## Convertimos a factores
data$season <- factor(data$season, levels = c(1,2,3,4),
labels = c("Invierno", "Primavera", "Verano", "Otoño"))
data$workingday <- factor(data$workingday, levels = c(0,1),
labels = c("Festivo", "Trabajo"))
data$weathersit <- factor(data$weathersit, levels = c(1,2,3),
labels = c("Despejado", "Nublado", "Lluvia/Nieve ligera"))
data$dteday <- as.Date(data$dteday, format = "%Y-%m-%d")
attach(data)
## Analisis causalidad
library(lattice)
bwplot(cnt ~ weathersit, data = data,
layout = c(1,1), xlab = "Pronostico del tiempo",
ylab = "Frecuencias",
par.settings = list(box.rectangle = list(fill = c("red","yellow","green"))))
bwplot(cnt ~ weathersit, data = data,
layout = c(1,1), xlab = "Pronostico del tiempo",
ylab = "Frecuencias",
panel = function(x,y,...) {
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = TRUE,...)
},
par.settings = list(box.rectangle = list(fill = c("red","yellow","green"))))
seq(0.01, 0.99, 0.01)
s <- seq(0.01, 0.99, 0.01)
s
qnor(s)
qn <- qnorm(s)
qn
df <- data.frame(p = s, q = qn)
View(df)
sample <- rnorm(200)
sample
quantile(sample, probs = s)
sample <- rnorm(2)
sample
quantile(sample, probs = s)
sample <- rnorm(200)
sample
quantile(sample, probs = s)
##qqnorm
trees
qqnorm(trees$Height)
par(mfrow=c(1,1))
qqnorm(trees$Height)
par(mfrow=c(1,1))
qqnorm(trees$Height)
##qqplot
randu
n <- length(randu$x)
n
y <- qunif(ppoints(n))
y
qqplot(y,randu$x)
qqnorm(randu$x)
chi3 <- qchisq(ppoints(30), df = 3)
chi3
n30 <- qnorm(ppoints(30))
qqplot(n30,chi3)
qqplot(chi3, chi3)
qqplot(n30,chi3)
cauchy <- qcauchy(ppoints(30))
qqplot(n30,cauchy)
x <- seq(-3, 3, 0.01)
plot(x, dnorm(x))
par(mfrow= c(1,2))
x <- seq(-3, 3, 0.01)
plot(x, dnorm(x))
plot(x, pnorm(x))
plot(x, dchisq(x, df=3))
plot(x, pchisq(x, df=3))
plot(x, dcauchy(x))
plot(x, pcauchy(x))
("../data/tema3/college-perf.csv")
cp <- read.csv("../data/tema3/college-perf.csv")
View(cp)
cp$Perf <- ordered(cp$Perf, levels = c("Low","Medium","High"))
View(cp)
cp$Pred <- ordered(cp$Pred, levels = c("Low","Medium","High"))
cp$Pred <- ordered(cp$Pred, levels = c("Low","Medium","High"))
table <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predecido"))
table
prop.table(table)
round(prop.table(table,1))
round(prop.table(table,1)*100)
round(prop.table(table,1)*100,2)
round(prop.table(table,2))
round(prop.table(table,2)*100,2)
barplot(table, legend = TRUE)
par(mfrow=c(1,1))
barplot(table, legend = TRUE)
barplot(table, legend = TRUE, xlab = "Nota predecida por el modelo")
mosaicplot(table, main = "Eficiencia del modelo")
summary(table)
usarrests <- read.csv("../data/tema3/USArrests.csv", stringsAsFactors = F)
View(usarrests)
usarrests <- read.csv("../data/tema3/USArrests.csv")
View(usarrests)
usarrests <- read.csv("../data/tema3/USArrests.csv", stringsAsFactors = FALSE)
rownames(usarrests) <- usarrests$x
View(usarrests)
rownames(usarrests) <- usarrests$X
View(usarrests)
usarrests$X <- NULL
View(usarrests)
View(usarrests)
head(usarrests,2,var)
apply(usarrests, 2, var)
View(usarrests)
acp <- prcom(usarrests,
center = TRUE, scale = TRUE)
print(acp)
acp <- prcom(usarrests,
center = TRUE, scale = TRUE)
acp <- prcomp(usarrests,
center = TRUE, scale = TRUE)
print(acp)
plot(acp, type = "l")
summary(acp)
biplot(acp, scale = 0)
head(usarrests)
pc1 <- apply(acp$rotation[,1]*usarrests, 1, sum)
pc1
pc2 <- apply(acp$rotation[,2]*usarrests, 1, sum)
pc2
usarrests$pc2 <- pc2
usarrests[,1:4] = NULL
View(usarrests)
usarrests$pc1 <- pc1
usarrests$pc2 <- pc2
View(usarrests)
install.packages("ROCR")
library(rocr)
data1 <- read.csv("../data/tema3/roc-example-1.csv")
data2 <- read.csv("../data/tema3/roc-example-2.csv")
View(data1)
View(data2)
pred1 <- prediction(data1$prob, data1$class)
pred1 <- predict(data1$prob, data1$class)
pred1 <- prediction(data1$prob, data1$class)
pred1 <- prediction(data1$prob, data1$class)
install.packages("rocr")
install.packages("ROCR")
library(ROCR)
data1 <- read.csv("../data/tema3/roc-example-1.csv")
data2 <- read.csv("../data/tema3/roc-example-2.csv")
pred1 <- prediction(data1$prob, data1$class)
View(data1)
perf1 <- performance(pred1, "tpr", "fpr")
View(pred1)
View(perf1)
plot(perf1)
lines(par()$usr[1:2], par$usr[3:4])
lines(par()$usr[1:2], par()$usr[3:4])
prob.cuts.1 <- data.frame(cut = perf1@alpha.values[[1]],
fpr = perf1@x.values[[1]],
tpr = perf1@y.values[[1]])
View(prob.cuts.1)
head(prob.cuts.1)
tail(prob.cuts.1)
prob.cuts.1[,prob.cuts.1$tpr>=0.8,]
prob.cuts.1[prob.cuts.1$tpr>=0.8,]
pred2 <- prediction(data2$prob, data2$class, label.ordering = c("non-buyer", "buyer"))
perf2 <- performance(pred2, "tpr", "fpr")
plot(perf2)
lines(par()$usr[1:2], par()$usr[3:4])
install.packages(c("rpart","rpart_plot","caret"))
library(caret)
library(rpart)
library(rpart.plot)
library(rpart_plot)
install.packages(c("rpart","rpart.plot","caret"))
install.packages("rpart.plot")
library(rpart.plot)
banknote <- read.csv("../data/tema3/banknote-authentication.csv")
View(banknote)
set.seed(2018)
training.ids <- createDataPartition(banknote$class, p = 0.7, list = F)
control = rpart.control(minsplit = 20, cp = 0.01)
mod <- rpart(class ~., data = banknote[training.ids,],
method = "class",
control = rpart.control(minsplit = 20, cp = 0.01)
)
mod <- rpart(class ~., data = banknote[training.ids,],
method = "class",
control = rpart.control(minsplit = 20, cp = 0.01))
mod
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
prp(mod, type = 1, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
prp(mod, type = 3, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
prp(mod, type = 4, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
prp(mod, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
View(banknote)
mod$cptable
dat
0.1288056+0.03607406
0.1288056+0.01911294
0.1288056+0.01686382
mod.pruned <- prune(mod, mod$cptable[8, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod, mod$cptable[3, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod, mod$cptable[5, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod, mod$cptable[8, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
mod.pruned <- prune(mod, mod$cptable[6, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
pred.pruned <- predict(mod, banknote[-training.ids,], type = "class")
table(banknote[-training.ids,]$class, pred.pruned, dnn = c("Actual","Predicho"))
mod.pruned <- prune(mod.pruned, mod$cptable[6, "CP"])
prp(mod.pruned, type = 2, extra = 104, nn = TRUE,
fallen.leaves = TRUE, faclen = 4, varlen = 8,
shadow.col = "gray")
pred.pruned <- predict(mod, banknote[-training.ids,], type = "class")
table(banknote[-training.ids,]$class, pred.pruned, dnn = c("Actual","Predicho"))
pred.pruned <- predict(mod.pruned, banknote[-training.ids,], type = "class")
table(banknote[-training.ids,]$class, pred.pruned, dnn = c("Actual","Predicho"))
pred.pruned2 <- predict(mod.pruned, banknote[-training.ids,], type = "prob")
head(pred.pruned)
head(pred.pruned2)
pred <- prediction(pred.pruned2[,2], banknote[-training.ids, "class"]
pred <- prediction(pred.pruned2[,2], banknote[-training.ids, "class"])
pred <- prediction(pred.pruned2[,2], banknote[-training.ids, "class"] )
perf <- performance(pred, "tpr","fpr")
plot(perf)
head(pred.pruned2)
install.packages("randomForest")
library(caret)
library(randomForest)
banknote <- read.csv("../data/tema3/banknote-authentication.csv")
View(banknote)
banknote$class <- factor(banknote$class)
View(banknote)
set.seed(2018)
training.ids <- createDataPartition(banknote$class, p = 0.7, list = F)
mod <- randomForest(x = banknote[training.ids, 1:4],
y = banknote[training.ids, 5],
ntree = 500,
keep.forest = TRUE)
pred <- predict(mod, banknote[-training.ids,])
table(banknote[-training.ids, "class"], pred, dnn = c("Actual", "Predicho"))
pred <- predict(mod, banknote[-training.ids,] type = "class")
table(banknote[-training.ids, "class"], pred, dnn = c("Actual", "Predicho"))
pred <- predict(mod, banknote[-training.ids,], type = "class")
table(banknote[-training.ids, "class"], pred, dnn = c("Actual", "Predicho"))
probs <- predict(mod, banknote[-training.ids,], type = "probs")
probs <- predict(mod, banknote[-training.ids,], type = "prob")
library(ROCR)
head(probs)
perf <- performance(pred, "tpr", "fpr")
# Sacar la predicción
pred <- prediction(probs[,2], banknote[-training.ids], "class")
# Sacar la predicción
pred <- prediction(probs[,2], banknote[-training.ids, "class")
# Sacar la predicción
pred <- prediction(probs[,2], banknote[-training.ids, "class"])
perf <- performance(pred, "tpr", "fpr")
plot(perf)
install.packages("e1071")
library(caret)
library(e1071)
banknote <- read.csv("../data/tema3/banknote-authentication.csv")
banknote$class <- factor(banknote$class)
#Particion para entrenar el modelo
set.seed(2018)
t.ids <- createDataPartition(banknote$class, 0.7, list = F)
t.ids <- createDataPartition(banknote$class, p = 0.7, list = F)
mod <- svm(class ~., data = banknote[t.ids,])
#Generamos una matriz de confusion
table(banknote[t.ids,"class"], fitted(mod), dnn = c("Actual", "Predicho"))
pred <- predict(mod, banknote[-t.ids,])
table(banknote[-t.ids, "class"], pred, dnn = c("Actual", "Predicho"))
plot(mod, data=banknote[t.ids,], skewness ~ variance)
plot(mod, data=banknote[t.ids,], skew ~ variance)
plot(mod, data=banknote[-t.ids,],skew ~ variance)
mod <- svm(class ~., data = banknote[t.ids,], class.weights = c("0"=0.3, "1"=0.7))
#Generamos una matriz de confusion
table(banknote[t.ids,"class"], fitted(mod), dnn = c("Actual", "Predicho"))
pred <- predict(mod, banknote[-t.ids,])
table(banknote[-t.ids, "class"], pred, dnn = c("Actual", "Predicho"))
plot(mod, data=banknote[t.ids,], skew ~ variance)
plot(mod, data=banknote[-t.ids,],skew ~ variance)
mod <- svm(class ~., data = banknote[t.ids,],
class.weights = c("0"=0.3, "1"=0.7),
cost=1000)
#Generamos una matriz de confusion
table(banknote[t.ids,"class"], fitted(mod), dnn = c("Actual", "Predicho"))
pred <- predict(mod, banknote[-t.ids,])
table(banknote[-t.ids, "class"], pred, dnn = c("Actual", "Predicho"))
plot(mod, data=banknote[t.ids,], skew ~ variance)
plot(mod, data=banknote[-t.ids,],skew ~ variance)
tuned <- tune.svm(class ~., data = banknote[t.ids,], gamma = 10^(-6:1), cost = 10^(1:2))
tuned
summary(tuned)
install.packages("naiveBayes")
install.packages("naivebayes")
library(e1071)
library(naivebayes)
library(caret)
ep <- read.csv("../data/tema3/electronics-purchase.csv")
View(ep)
set.seed(2018)
t.ids <- createDataPartition(ep$Purchase, p = 0.67, list = F)
View(ep)
mod <- naiveBayes(Purchase ~., data = ep[t.ids,])
mod
View(ep)
pred <- predict(mod, ep[-t.ids,])
tab <- table(ep[-t.ids,]$Purchase, pred, dnn = c("Actual", "Predicha"))
confusionMatrix(tab)
install.packages("class")
install.packages("class")
library(class)
library(caret)
vac <- read.csv("../data/tema3/vacation-trip-classification.csv")
View(vac)
vac$Income.z <- scale(vac$Income)
View(vac)
vac$Family_size.z <- scale(vac$Family_size)
View(vac)
set.seed(2018)
t.ids <- createDataPartition(vac$Result, p = 0.5, list = F)
train <- vac[t.ids,]
temp <- vac[-t.ids,]
v.ids <- createDataPartition(temp$Result, p = 0.5, list = F)
val <- temp[v.ids,]
test <- temp[-v.ids,]
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 1)
err1mat1 <- table(val$Result, pred1, dnn = c("Actual", "Predichos"))
errmat1
errmat1 <- table(val$Result, pred1, dnn = c("Actual", "Predichos"))
errmat1
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 2)
errmat1 <- table(val$Result, pred1, dnn = c("Actual", "Predichos"))
errmat1
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 4)
errmat1 <- table(val$Result, pred1, dnn = c("Actual", "Predichos"))
errmat1
pred1 <- knn(train[,4:5], val[,4:5], train[,3], k = 5)
errmat1 <- table(val$Result, pred1, dnn = c("Actual", "Predichos"))
errmat1
pred2 <- knn(train[,4:5], test[,4:5], train[,3], k = 1)
errmat2 <- table(test$Result, pred2, dnn = c("Actual","Predichos"))
errmat2
knn.automate <- function(tr_predictors, val_predictors, tr_target,
val_target, start_k, end_k) {
for(k in star_k:end_k) {
pred <- knn(tr_predictors, val_predictors, tr_target, k)
tab <- table(val_target, pred, dnn = c("Actual","Predichos"))
cat(paste("Matriz de confusión para k = ", k, "\n"))
cat("=============================================\n")
print(tab)
cat("============================================\n")
}
}
knn.automate(train[,4:5], val[,4:5], train[,3], val[,3], 1,8)
knn.automate(train[,4:5], val[,4:5], train[,3], val[,3], val[,3], 1,8)
knn.automate(train[,4:5], val[,4:5], train[,3], val[,3], 1,8)
knn.automate <- function(tr_predictors, val_predictors, tr_target,
val_target, start_k, end_k) {
for(k in start_k:end_k) {
pred <- knn(tr_predictors, val_predictors, tr_target, k)
tab <- table(val_target, pred, dnn = c("Actual","Predichos"))
cat(paste("Matriz de confusión para k = ", k, "\n"))
cat("=============================================\n")
print(tab)
cat("============================================\n")
}
}
knn.automate(train[,4:5], val[,4:5], train[,3], val[,3], 1,8)
trcntrl <- trainControl(method = "repeatedcv", number = 10, repeats(3))
trcntrl <- trainControl(method = "repeatedcv", number = 10, repeat(3))
trcntrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
caret_knn_fit
caret_knn_fit
caret_knn_fit <-train(Result ~ Family_size + Income, data = train,
method = "knn", trControl = trcntrl,
preProcess = c("center","scale"),
tuneLength = 10)
caret_knn_fit
pred5 <- knn(train[,4:5], val[,4:5], train[,3], k = 5, prob = T)
pred5
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
library(nnet)
library(caret)
bn <- read.csv("../data/tema3/banknote-authentication.csv")
bn$class <- factor(bn$class)
t.id <- createDataPartition(bn$class, p = 0.7, list = F)
mod <- nnet(class ~., data = bn[t.id,],
size = 3, maxit = 10000, decay = .001, rang = 0.05)
pred <- predict(mod, newdata = bn[-t.id,], type = "class")
table(bn[-t.id,]$class,pred, dnn = c("Actual", "Predichos"))
mod <- nnet(class ~., data = bn[t.id,],
size = 3, maxit = 10000, decay = .001, rang = 0.05,
na.action = na.omit)
mod <- nnet(class ~., data = bn[t.id,],
size = 3, maxit = 10000, decay = .001, rang = 0.05,
na.action = na.omit,
skip = TRUE)
mod <- nnet(class ~., data = bn[t.id,],
size = 3, maxit = 10000, decay = .001, rang = 0.05,
na.action = na.omit,
skip = T)
View(bn)
apply(bn, 1, max)
apply(bn, 2, max)
pred2 <- predict(mod, newdata = bn[-t.id,], type = "raw")
library(ROCR)
perf <- performance(pred2, "tpr", "fpr")
perf <- performance(prediction(pred2, bn[-t.id]), "tpr", "fpr")
perf <- performance(prediction(pred2, bn[-t.id], "class"), "tpr", "fpr")
perf <- performance(prediction(pred2, bn[-t.id, "class"), "tpr", "fpr")
perf <- performance(prediction(pred2, bn[-t.id, "class"], "tpr", "fpr")
perf <- performance(prediction(pred2, bn[-t.id, "class"]), "tpr", "fpr")
pred2 <- predict(mod, newdata = bn[-t.id,], type = "raw")
perf <- performance(prediction(pred2, bn[-t.id, "class"]), "tpr", "fpr")
plot(perf)
install.packages("MASS")
install.packages("MASS")
library(MASS)
library(caret)
bn <- read.csv("../data/tema3/banknote-authentication.csv")
bn$class <- factor(bn$class)
set.seed(2018)
t.id <- createDataPartition(bn$class, p=0.7, list = F)
mod <- lda(bn[t.id,1:4], bn[t.id,5])
bn[t.id, "Pred"] <- predict(mod, bn[t.id, 1:4])
bn[t.id, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
table(bn[t.id, "class"], bn[t.id, "Pred"], dnn = c("Actual", "Predichos"))
bn[-t.id, "Pred"] <- predict(mod, bn[-t.id,1:4])$class
table(bn[-t.id, "class"], bn[-t.id, "Pred"], dnn = c("Actual", "Predichos"))
mod <- lda(class ~., data = bn[t.id,])
#Predecimos los que forman parte del modelo
bn[t.id, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
mod <- lda(class ~., data = bn[t.id,])
#Predecimos los que forman parte del modelo
bn[t.id, "Pred"] <- predict(mod, bn[t.id, 1:4])$class
library(caret)
bn <- read.csv("../data/tema3/boston-housing-logistic.csv")
View(bn)
bn$CLASS <- factor(bn$CLASS, levels = c(0,1))
set.seed(2018)
bh <- read.csv("../data/tema3/boston-housing-logistic.csv")
bh$CLASS <- factor(bh$CLASS, levels = c(0,1))
t.id <- createDataPartition(bh$CLASS, p=0.7, list = F)
mod <- glm(CLASS ~., data = bh[t.id,], family = binomial)
summary(mod)
